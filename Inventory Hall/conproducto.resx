<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAABMLAAATCwAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACbAAUAlAAAAJoAAy6aAASpmgAE85oA
        A+aaAASDmAAEFwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJoABACbAAUrmgAEvpoA
        BP2aAATvmgAE9JoABPWaAASDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJsABQCXAAEAmgAELpoA
        BL+aAAT/mgAEwJoAAzyaAANgmgAE85kABOIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmgAEAJsA
        BSuaAAS/mgAE/5oABL+aAAQumQADAJoAAzyaAATvmgAE7wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmgAFAJoA
        AgCaAAQtmgAEv5oABP+aAATAmwAFK5oAAwCaAAQtmgAEwJoABP6aAASlAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAACXAAIAlAABApgAAwuZAAMSmgAEFZkAAxWaAAMRmQAECpgABAGaAAQAAAAAAAAA
        AACaAAQAmgAFKpoABL6aAAT/mQAEwJoABDCZAAQAmgAFKpoABL6aAAT/mQAEvpoABC0AAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAACZAAQAmAAED5kABECZAAR2mgAEqZkAA8qaAATamQAD2ZoAA8eaAASlmgAEcZkA
        BDuaAAQLmAACAJoABC6aAAS+mgAE/5oABL+aAAUrkwADAJoABC6aAAS+mgAE/5oABL+aAAUrlwAEAAAA
        AAAAAAAAAAAAAAAAAACZAAQAmAADCZoABEuaAASrmgAE6poABP+aAAT2mgAE7poABOmaAATpmgAE7poA
        BPeaAAT/mgAE55kABKOaAARfmgAEvpoABP+aAAS/mgAELpkAAwCbAAUrmgAEv5oABP+aAAS/mgAELpcA
        AQCbAAUAAAAAAAAAAACZAAAAlwAGAJgAAh2aAASPmgAE75oABP2aAATTmQADlJoAA1maAAQxmgAEHpoA
        BB6aAAQymgADWpoAA5WaAATUmgAE/JoABPeaAAT/mgAExJkABSubAAMAmgAELpoABL+aAAT/mgAEv5sA
        BSuaAAQAAAAAAAAAAAAAAAAAAAAAAJoABACbAAUlmgAEspoABPuaAATjmgAEf5oAAyeVAAcDlgAGAAAA
        AAAAAAAAAAAAAAAAAACcAAYAnQAHBJoAAymZAAOBmgAE45oABP+ZAAO7mQACIJkABSuaAAS/mgAE/5oA
        BL+aAAQulwABAJsABQAAAAAAAAAAAKoAAACYAAIAmwACH5oABLSaAAT/mgAEyZoABUKaAAQEmgAEAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmQAEAJkABASaAARDmgAEyZoABP2ZAAO7mgAEw5oA
        BP+aAAS/mwAFK5oABAAAAAAAAAAAAAAAAAAAAAAAmgADAJsAAgmaAASTmgAE/ZkABMqaAAQ1ngAIAJgA
        AgeZAAMVmgAEGJoABBiaAAQYmgAEGJoABBiaAAQYmgAEGJoABBiZAAMVmgAEB6EACwCZAAQ1mgAEyZoA
        BP+aAAT/mQAEwJoABC+YAAIAmwAFAAAAAAAAAAAAAAAAAAAAAACaAAQAmgADU5oABPGaAATjmgAFQpsA
        BQCYAAMZmgAEh5kAA9iaAATomgAE6JoABOiaAATomgAE6JoABOiaAATomgAE6JkAA9iaAASHmAADGZwA
        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
        CH+CABB/wP/A/+A/Af/wAAP/+AAH//4AH/8=
</value>
  </data>
</root>