<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>