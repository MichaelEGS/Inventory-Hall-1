<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAABMLAAATCwAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABMOi0ASjwwAU88
        LQNSPCwEUD4uBlE9KgdQPi0GTz0sBVE+LgRQPikCUFEIAFBEHwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFE8LQBROi4FUT0sHVA9KzRQPStHTz4sWFA+
        LGlQPix6UD0sh1A9LIxQPiyTUD4rlVA+LJRQPiyOUD4siVA+K39QPixuTz0rXU89K0xQPiw6Tz4sJFE7
        Kgv0AAIAVzYpAAAAAAAAAAAAAAAAAAAAAABQPSsAUz4pAVA9KxFQPixATz0rfFA+LKFQPiy1Tz0swE89
        LLxPPiywUD4sm1A+LItPPix+UD0sdE8+K3JQPixuUD4scVA+LHRPPSt7UD4siVA+LJhPPSutUD0svVA9
        K8NQPiy6UD4sqU89LIhPPStSUT0pGVA9KwRONiIAUkMzAFA+LABRPiwlUD4srVA+LLtQPSuWUD0sblA9
        LD9PPSweTz0sE089LA1PPi0ITj0rBEZCKAJOPSsyTz4rbk89LHRPPSx0Tz0sTlE7LAlOPCoDUD4tB1A9
        KwxQPSsSTz0sG1A+LTZQPixkTz4skFA+LLNQPSu/UD4sSVZBKQBOPS0AUD4sAFE9Kz5QPiy+UD0sNUlE
        JQBPPisAAAAAAAAAAAAAAAAAAAAAAEw+LQBRPisAUD4rMk89LLhTQSyZW0YtjFhELI9QPiy9Tz0rZgAA
        AABDMyQAAAAAAAAAAAAAAAAAAAAAAE04JABGLBAATz0sG1A+LKRQPixxVD4wAE8+KwBQPiwAUD4rM1A+
        LLVQPSwgUD0sAAAAAAAAAAAAAAAAAAAAAAAAAAAATz4rAE4+KgdQPiyTTTssgcSNOUnRljq00JY6fVxG
        LE9PPSy4Tz0rKk89KwAAAAAAAAAAAAAAAAAAAAAAAAAAAFA/KwBQQCoHUD4sllA+LGVSPSsATT8tAFA+
        LABPPSseUD4suVA+LC5QPiwAAAAAAAAAAAAAAAAAAAAAAAAAAABPPiwAUD8rJ08+LLc/Mior2Js6UtOX
        O//UlzutfFkuDU89LJtQPixx0v8sAE88LAAAAAAAAAAAAAAAAAAAAAAATz0sAE89LAtQPiujUD4rUlA/
        KwBWJioAUD0sAFA9LBJQPSy0UD4rR1A+KwAAAAAAAAAAAAAAAAAAAAAAAAAAAFA9KwBQPixsUD0rmgAA
        AADTmDtK05c7+NOXOqN7WTIATz0rUlA9LLBPPisRUD0sAAAAAAAAAAAAAAAAAAAAAABQPiwAUD8sFVA+
        LLRPPSs9Tz0rAAAAAABPPSsATjwqBlA+LJFQPix/Tz0pA1A+KwAAAAAAAAAAAAAAAABPPCkATzwoBlA+
        LJ1PPStlq3w2ANKWOj7Tlzvp0pY6lY9pMwBPPiwjUD4st1A/KzZQPiwAAAAAAAAAAAAAAAAATDYwAFNE
        KQBQPSxGUD4ss089LBxPPSwAAAAAAEw/MABQPCsATz0sPlA+K8BQPix/Tz0sTFA+KydSPCwITkAiAE89
        KwBPPSsoUD4st1A+LCyvfzcA05c7RNOXO+nSljqb2pw7BTkyLgNPPSubTz4rbk89KwBOPCkATDsmAU89
        KxhQPSs7UD0rZlA+LLhPPixvAAAAAEc0JwAAAAAAAAAAAFE+KwBRPisFTz0rQE8+LIhQPSuuTz4stk89
        LKFQPSx6UD4tRE8+LGNQPSusTjsqD4toLgDTlztw05c7/9OXO8rSljohmW80AFA9LG9PPiugUDwrME89
        LGRQPiyRUD4sr1A+LLRQPiuaUT4sXVE/LA9RPisAAAAAAAAAAAAAAAAAAAAAAEc+KAAFTw8ATT0qBE88
        Kw9PPi0qTz4sXE8+LItQPiyqUD0szVA+LHJKMCUBtoI7ANSZO0LUmDuu1Jg7ftaaOw+JZTIAUD4sN1A+
        LNBQPiy1Tz4smk89K3JPPSs9TzwqF08+KwhQOScBUDooAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAA9SjAALVU0AE8+KxJPPis1UD4qGEs+LgBNOyoEUEEsFmJLLixaRS4bRDUrBEw7
        KwBPPSwKTz0rO08+KyJTOSsFTz0sAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQPSsAUD0rEVA+LHFPPiy7UD0ru08+
        LLtPPSx2TzwrEE49LAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUD0sAE47Kw5QPSyNUD4ssU89
        LUtQPSsnTz0sRU89LLBPPSyCTzwqCk88KgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEpDMABATDcBUD0rcFA+
        LLBQPiwmUEAsAFA8LABQPiwAUT4sKlA+LLpQPixdUE89AFA9KwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUD4sAFA+
        LCpPPiu7Tz0sRE8+KwAAAAAAAAAAAFA8KwBMQysATz4rXVA+LLhRPCwXUD4sAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFA+
        LQBQNiUAUD0sb1A9LJtOPSwITz0sAAAAAAAAAAAAAAAAAE4+KgBOPioVUD4srU89LFdQPiwAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAUD4sAFA+LA9QPiysTz0rVk4+KwBROysAAAAAAAAAAAAAAAAAAAAAAE89KwBQPit5Tz0rkFEs
        LgFQNywAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAABPPiwATz4sME8+LLZQPSslUD0rAAAAAAAAAAAAAAAAAAAAAAAAAAAAUD4sAFE+
        LDtQPiyzTz4sHU8+LAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAFA9LABPPixeUD0sn049LAVOPSwAAAAAAAAAAAAAAAAAAAAAAAAA
        AABQPSwAUT0rF1A9LLZPPiw6Tz4sAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUD4rAFA+LHtQPiuGUD4sAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAE8+LABPPiwOTz4sqVA+K09QPisAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABPPSwATz0siFA9LHZPPSwAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAUD4sAFA+LAlQPiyjUD0sWk9ALQBsExMAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAE89KwBPPSuHUD0rd089
        KwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQPiwAUD4sClA+LKRQPixaUD4rAEU5OQAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATz0sAE8+
        K3NPPSyKTz0sAFA+KAAAAAAAAAAAAAAAAAAAAAAAAAAAAFA9KwBQPSsRUD0rs1A9LEtQPSwAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AABQPiwATz8sQlA+LK9QPiwaUD4sAAAAAAAAAAAAAAAAAAAAAAAAAAAATz4sAFA9LEJPPiy6Tz0sJE89
        LAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAFA9KwBRPiwPUD4so1A+LHlPPiwLTz4tAAAAAAAAAAAAUT0sAHsfIwBQPSsqUD4ssE89
        K3dNNy4CTjotAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAVTgmAE1CMABRPSswTz4srFA9K5tPPSxXUD0sPU89LDpQPStHUT0sdFA+
        LLlPPiyHTT4sEE8+KwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFE9KwBQPSwgUD0sblA9LKJPPSuqUD0srlA9
        K6lPPiyPUD0rSFA/KgtQPyoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAE48LABOPCwCTz0sDE89
        KxNQPSwUUD0rEE4+LAZFPiwASz4sAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA///////gD//4AAA/gAAAA4AAAAOP8B/jj+AP44/gD+OP5Efjh8RH48DE
        BgfABCAH8AQgD/+IIf//8B///+AP///Dj///x8f//8fH//+P4///j+P//4/j//+f4///n+P//5/j//+f
        4///j+P//4fD///AB///4A////A///////8=
</value>
  </data>
</root>